`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2017/08/06 16:02:43
// Design Name: 
// Module Name: AD_module
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module AD_module(
    input wire sys_clk,
    input wire rst_n,
    input wire signed [11:0] AD_digits_in,
    output reg AD_clk,
    output wire signed [12:0] Vmax,
    output wire signed [12:0] Vmin,
    output reg signed [12:0] AD_digits_out,
    output Vbase
    );
    
    parameter max_ref_gate_cnt = 99_999_999;
    parameter volt_ref_gate = 99_999_999;
    
    reg ref_gate;
    reg [31:0] ref_gate_cnt;
    wire ref_gate_pos_detect;
    wire ref_gate_neg_detect;
    reg ref_gate_pos_detect_r0;
    reg ref_gate_pos_detect_r1;
    
    wire AD_clk_pos_detect;
    reg AD_clk_pos_detect_r0;
    reg AD_clk_pos_detect_r1;
    
    reg signed [12:0] Vbase;
    reg signed [12:0] Vmax_r;
    reg signed [12:0] Vmin_r;
    
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) AD_clk <= 1'b0;
        else AD_clk <= ~ AD_clk;
    end
    
    // -- ref 0.5Hz ref gate
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            ref_gate <= 1'b0;
            ref_gate_cnt <= 32'd0;
        end
        else if (ref_gate_cnt == max_ref_gate_cnt) begin
            ref_gate <= ~ ref_gate;
            ref_gate_cnt <= 32'd0;
        end
        else ref_gate_cnt <= ref_gate_cnt + 1;
    end
    
    // -- detect the posedge of ref_gate
    assign ref_gate_pos_detect = (ref_gate_pos_detect_r0 && 
                                  !ref_gate_pos_detect_r1) ? 1'b0: 1'b1;
    assign ref_gate_neg_detect = (!ref_gate_pos_detect_r0 &&
                                   ref_gate_pos_detect_r1) ? 1'b1: 1'b0;
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            ref_gate_pos_detect_r0 <= 1'b0;
            ref_gate_pos_detect_r1 <= 1'b0;
        end
        else begin
            ref_gate_pos_detect_r0 <= ref_gate;
            ref_gate_pos_detect_r1 <= ref_gate_pos_detect_r0;
        end
    end
    
    // -- detect the posedge of AD_clk
    assign AD_clk_pos_detect = (AD_clk_pos_detect_r0 &&
                                !AD_clk_pos_detect_r1) ? 1'b1: 1'b0;
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            AD_clk_pos_detect_r0 <= 1'b0;
            AD_clk_pos_detect_r1 <= 1'b1;
        end
        else begin
            AD_clk_pos_detect_r0 <= AD_clk;
            AD_clk_pos_detect_r1 <= AD_clk_pos_detect_r0;
        end
    end
    
    // -- refresh AD_digits_out
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            AD_digits_out <= 13'b1_1111_1111_1111;
        end
        else if (AD_clk_pos_detect) AD_digits_out <= AD_digits_in;
        else AD_digits_out <= AD_digits_out;
    end
    
    // -- set Vbase level
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            Vbase <= 13'b0_1111_1111_1111;
        end
        else if (Vmax_r > Vbase && Vmin_r < Vbase) Vbase <= Vbase;
        else if (Vmax_r > Vbase && Vmin_r >= Vbase) Vbase <= Vbase + Vmax_r[11:1] - Vmin_r[11:1];
        else if (Vmax_r <= Vbase && Vmin_r < Vbase) Vbase <= Vbase - Vmax_r[11:1] + Vmin_r[11:1];
        else Vbase <= Vbase;
    end
    
    // -- set Vmax_r
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            Vmax_r <= 13'b1_0000_0000_0000;
        end
        else if (ref_gate && AD_clk_pos_detect && AD_digits_in >= Vmax_r) Vmax_r <= AD_digits_in;
        else if (ref_gate_neg_detect) Vmax_r <= 13'b1_0000_0000_0000;
        else Vmax_r <= Vmax_r;
    end
    
    // -- set Vmin_r
    always @ (posedge sys_clk or negedge rst_n) begin
        if (!rst_n) begin
            Vmin_r <= 13'b0_1111_1111_1111;
        end
        else if (ref_gate && AD_clk_pos_detect && AD_digits_in <= Vmin_r) Vmin_r <= AD_digits_in;
        else if (ref_gate_neg_detect) Vmin_r <= 13'b0_1111_1111_1111;
        else Vmin_r <= Vmin_r;
    end
    
    assign Vmax = Vmax_r;
    assign Vmin = Vmin_r;
    
endmodule
